/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ec.edu.espe.view;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import ec.edu.espe.controller.MongoDBManager;
import espe.edu.ec.model.Bill;
import espe.edu.ec.model.Counter;
import espe.edu.ec.model.Customer;
import espe.edu.ec.model.MenuItem;
import espe.edu.ec.model.SaleNote;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import org.bson.Document;

/**
 *
 * @author Camila Bohorquez
 */
public class FrmPrintMenu extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrintMenu
     */
    public FrmPrintMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txCedula = new javax.swing.JTextField();
        btCancelar = new javax.swing.JToggleButton();
        btBuscar = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Ingrese numero de cedula:");

        txCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txCedulaActionPerformed(evt);
            }
        });

        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btBuscar.setText("Buscar");
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btCancelar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btBuscar)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(txCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(btBuscar)
                .addGap(67, 67, 67)
                .addComponent(btCancelar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        new FrmAdminMenu().setVisible(true);
        dispose();
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        String id = txCedula.getText();

        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una cédula", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        MongoDatabase database = MongoDBManager.getDatabase();

        if (database == null) {
            JOptionPane.showMessageDialog(this, "Error al conectar con la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        MongoCollection<Document> ordersCollection = database.getCollection("ordenes");

        Document query = new Document("cedulaCliente", id);
        Document order = ordersCollection.find(query).first();

        LocalDateTime date = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDate = date.format(formatter);

        FindIterable<Document> documents = ordersCollection.find(query);

        StringBuilder resultString = new StringBuilder();
        Map<String, Integer> orderedItems = new HashMap<>();

        if (order != null) {
            int selectedOption = JOptionPane.showOptionDialog(
                    null,
                    "¿Qué desea imprimir?",
                    "Cliente Encontrado",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new Object[]{"Factura", "Nota de Venta"},
                    "Factura");

            if (selectedOption == JOptionPane.YES_OPTION) {
                List<MenuItem> menuItems = Counter.loadMenuItems();
                Customer customer = new Customer(
                        order.getString("nombreCliente"),
                        order.getString("cedulaCliente"),
                        order.getString("correoCliente"),
                        order.getString("direccionCliente"),
                        order.getString("telefonoCliente")
                );

                for (Document doc : documents) {
                    List<Document> platillos = (List<Document>) doc.get("platillos");
                    for (Document platillo : platillos) {
                        String nombrePlatillo = platillo.getString("nombre");
                        int cantidadPlatillo = platillo.getInteger("cantidad");
                        orderedItems.put(nombrePlatillo, cantidadPlatillo);
                    }
                }

                float total = new Counter().calculateTotal(orderedItems, menuItems);
                Bill bill = new Bill(customer, orderedItems, total);
                new FrmPrintOutput(bill.toString()).setVisible(true);
                dispose();
            } else if (selectedOption == JOptionPane.NO_OPTION) {
                List<MenuItem> menuItems = Counter.loadMenuItems();
                Customer customer = new Customer(
                        order.getString("nombreCliente"),
                        order.getString("cedulaCliente"),
                        order.getString("correoCliente"),
                        order.getString("direccionCliente"),
                        order.getString("telefonoCliente")
                );

                for (Document doc : documents) {
                    List<Document> platillos = (List<Document>) doc.get("platillos");
                    for (Document platillo : platillos) {
                        String nombrePlatillo = platillo.getString("nombre");
                        int cantidadPlatillo = platillo.getInteger("cantidad");
                        orderedItems.put(nombrePlatillo, cantidadPlatillo);
                    }
                }

                float total = new Counter().calculateTotal(orderedItems, menuItems);
                SaleNote saleNote = new SaleNote(customer, orderedItems, total);
                new FrmPrintOutput(saleNote.toString()).setVisible(true);
                dispose();
            }

        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron ordenes para la cedula ingresada.");
        }


    }//GEN-LAST:event_btBuscarActionPerformed

    private void txCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txCedulaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrintMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrintMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrintMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrintMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrintMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btBuscar;
    private javax.swing.JToggleButton btCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txCedula;
    // End of variables declaration//GEN-END:variables
}
